//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class AppointmentsClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    get(request: GetAppointmentRequest, cancelToken?: CancelToken): Promise<PaginationResponseOfAppointmentDto> {
        let url_ = this.baseUrl + "/api/appointments/get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<PaginationResponseOfAppointmentDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<PaginationResponseOfAppointmentDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginationResponseOfAppointmentDto>(null as any);
    }

    view(id: number, cancelToken?: CancelToken): Promise<AppointmentDto> {
        let url_ = this.baseUrl + "/api/appointments/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processView(_response);
        });
    }

    protected processView(response: AxiosResponse): Promise<AppointmentDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<AppointmentDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AppointmentDto>(null as any);
    }

    update(id: number, request: CreateOrUpdateAppointmentRequest, cancelToken?: CancelToken): Promise<AppointmentDto> {
        let url_ = this.baseUrl + "/api/appointments/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<AppointmentDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<AppointmentDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AppointmentDto>(null as any);
    }

    remove(id: number, cancelToken?: CancelToken): Promise<AppointmentDto> {
        let url_ = this.baseUrl + "/api/appointments/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: AxiosResponse): Promise<AppointmentDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<AppointmentDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AppointmentDto>(null as any);
    }

    create(request: CreateOrUpdateAppointmentRequest, cancelToken?: CancelToken): Promise<AppointmentDto> {
        let url_ = this.baseUrl + "/api/appointments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<AppointmentDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<AppointmentDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AppointmentDto>(null as any);
    }
}

export class GalleryClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    get(request: GetGalleryRequest, cancelToken?: CancelToken): Promise<PaginationResponseOfGalleryDto> {
        let url_ = this.baseUrl + "/api/gallery/get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<PaginationResponseOfGalleryDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<PaginationResponseOfGalleryDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginationResponseOfGalleryDto>(null as any);
    }

    view(id: number, cancelToken?: CancelToken): Promise<GalleryDto> {
        let url_ = this.baseUrl + "/api/gallery/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processView(_response);
        });
    }

    protected processView(response: AxiosResponse): Promise<GalleryDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GalleryDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GalleryDto>(null as any);
    }

    remove(id: number, cancelToken?: CancelToken): Promise<GalleryDto> {
        let url_ = this.baseUrl + "/api/gallery/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: AxiosResponse): Promise<GalleryDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GalleryDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GalleryDto>(null as any);
    }

    update(request: CreateOrUpdateGalleryRequest, cancelToken?: CancelToken): Promise<GalleryDto[]> {
        let url_ = this.baseUrl + "/api/gallery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<GalleryDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GalleryDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GalleryDto[]>(null as any);
    }

    create(request: CreateOrUpdateGalleryRequest, cancelToken?: CancelToken): Promise<GalleryDto[]> {
        let url_ = this.baseUrl + "/api/gallery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<GalleryDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<GalleryDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GalleryDto[]>(null as any);
    }
}

export class PromosClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    get(request: GetPromoRequest, cancelToken?: CancelToken): Promise<PaginationResponseOfPromoDto> {
        let url_ = this.baseUrl + "/api/promos/get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<PaginationResponseOfPromoDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<PaginationResponseOfPromoDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginationResponseOfPromoDto>(null as any);
    }

    view(id: number, cancelToken?: CancelToken): Promise<PromoDto> {
        let url_ = this.baseUrl + "/api/promos/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processView(_response);
        });
    }

    protected processView(response: AxiosResponse): Promise<PromoDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<PromoDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PromoDto>(null as any);
    }

    update(id: number, request: CreateOrUpdatePromoRequest, cancelToken?: CancelToken): Promise<PromoDto> {
        let url_ = this.baseUrl + "/api/promos/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<PromoDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<PromoDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PromoDto>(null as any);
    }

    remove(id: number, cancelToken?: CancelToken): Promise<PromoDto> {
        let url_ = this.baseUrl + "/api/promos/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: AxiosResponse): Promise<PromoDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<PromoDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PromoDto>(null as any);
    }

    create(request: CreateOrUpdatePromoRequest, cancelToken?: CancelToken): Promise<PromoDto> {
        let url_ = this.baseUrl + "/api/promos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<PromoDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<PromoDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PromoDto>(null as any);
    }
}

export class PunchMapsClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    get(request: GetPunchMapRequest, cancelToken?: CancelToken): Promise<PaginationResponseOfPunchMapDto> {
        let url_ = this.baseUrl + "/api/punch-maps/get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<PaginationResponseOfPunchMapDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<PaginationResponseOfPunchMapDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginationResponseOfPunchMapDto>(null as any);
    }

    view(id: number, cancelToken?: CancelToken): Promise<PunchMapDto> {
        let url_ = this.baseUrl + "/api/punch-maps/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processView(_response);
        });
    }

    protected processView(response: AxiosResponse): Promise<PunchMapDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<PunchMapDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PunchMapDto>(null as any);
    }

    update(id: number, request: CreateOrUpdatePunchMapRequest, cancelToken?: CancelToken): Promise<PunchMapDto> {
        let url_ = this.baseUrl + "/api/punch-maps/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<PunchMapDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<PunchMapDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PunchMapDto>(null as any);
    }

    remove(id: number, cancelToken?: CancelToken): Promise<PunchMapDto> {
        let url_ = this.baseUrl + "/api/punch-maps/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: AxiosResponse): Promise<PunchMapDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<PunchMapDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PunchMapDto>(null as any);
    }

    create(request: CreateOrUpdatePunchMapRequest, cancelToken?: CancelToken): Promise<PunchMapDto> {
        let url_ = this.baseUrl + "/api/punch-maps";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<PunchMapDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<PunchMapDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PunchMapDto>(null as any);
    }
}

export class SchedulesClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    nearest(request: GetNearestScheduleRequest, cancelToken?: CancelToken): Promise<ScheduleDto> {
        let url_ = this.baseUrl + "/api/schedules/nearest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processNearest(_response);
        });
    }

    protected processNearest(response: AxiosResponse): Promise<ScheduleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ScheduleDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ScheduleDto>(null as any);
    }

    get(request: GetSchedulesRequest, cancelToken?: CancelToken): Promise<ScheduleDayDto[]> {
        let url_ = this.baseUrl + "/api/schedules/get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<ScheduleDayDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ScheduleDayDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ScheduleDayDto[]>(null as any);
    }

    getTimes(request: GetScheduleTimesRequest, cancelToken?: CancelToken): Promise<ScheduleTimeDto[]> {
        let url_ = this.baseUrl + "/api/schedules/times/get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTimes(_response);
        });
    }

    protected processGetTimes(response: AxiosResponse): Promise<ScheduleTimeDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ScheduleTimeDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ScheduleTimeDto[]>(null as any);
    }

    getPeriods(request: GetSchedulePriodsRequest, cancelToken?: CancelToken): Promise<SchedulePeriodDto[]> {
        let url_ = this.baseUrl + "/api/schedules/periods/get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPeriods(_response);
        });
    }

    protected processGetPeriods(response: AxiosResponse): Promise<SchedulePeriodDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<SchedulePeriodDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SchedulePeriodDto[]>(null as any);
    }

    view(id: number, cancelToken?: CancelToken): Promise<ScheduleDto> {
        let url_ = this.baseUrl + "/api/schedules/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processView(_response);
        });
    }

    protected processView(response: AxiosResponse): Promise<ScheduleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ScheduleDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ScheduleDto>(null as any);
    }

    update(id: number, request: CreateOrUpdateScheduleRequest, cancelToken?: CancelToken): Promise<ScheduleDto> {
        let url_ = this.baseUrl + "/api/schedules/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<ScheduleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ScheduleDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ScheduleDto>(null as any);
    }

    remove(id: number, cancelToken?: CancelToken): Promise<ScheduleDto> {
        let url_ = this.baseUrl + "/api/schedules/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: AxiosResponse): Promise<ScheduleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ScheduleDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ScheduleDto>(null as any);
    }

    fill(request: FillScheduleRequest, cancelToken?: CancelToken): Promise<number[]> {
        let url_ = this.baseUrl + "/api/schedules/fill";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFill(_response);
        });
    }

    protected processFill(response: AxiosResponse): Promise<number[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<number[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number[]>(null as any);
    }

    create(request: CreateOrUpdateScheduleRequest, cancelToken?: CancelToken): Promise<ScheduleDto> {
        let url_ = this.baseUrl + "/api/schedules";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<ScheduleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ScheduleDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ScheduleDto>(null as any);
    }

    clear(id: number | undefined, cancelToken?: CancelToken): Promise<ScheduleDto> {
        let url_ = this.baseUrl + "/api/schedules/clear?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processClear(_response);
        });
    }

    protected processClear(response: AxiosResponse): Promise<ScheduleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ScheduleDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ScheduleDto>(null as any);
    }
}

export class ServiceGroupClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    get(request: GetServiceGroupRequest, cancelToken?: CancelToken): Promise<PaginationResponseOfServiceGroupDto> {
        let url_ = this.baseUrl + "/api/service-groups/get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<PaginationResponseOfServiceGroupDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<PaginationResponseOfServiceGroupDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginationResponseOfServiceGroupDto>(null as any);
    }

    view(id: number, cancelToken?: CancelToken): Promise<ServiceGroupDto> {
        let url_ = this.baseUrl + "/api/service-groups/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processView(_response);
        });
    }

    protected processView(response: AxiosResponse): Promise<ServiceGroupDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ServiceGroupDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ServiceGroupDto>(null as any);
    }

    update(id: number, request: CreateOrUpdateServiceGroupRequest, cancelToken?: CancelToken): Promise<ServiceGroupDto> {
        let url_ = this.baseUrl + "/api/service-groups/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<ServiceGroupDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ServiceGroupDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ServiceGroupDto>(null as any);
    }

    remove(id: number, cancelToken?: CancelToken): Promise<ServiceGroupDto> {
        let url_ = this.baseUrl + "/api/service-groups/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: AxiosResponse): Promise<ServiceGroupDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ServiceGroupDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ServiceGroupDto>(null as any);
    }

    create(request: CreateOrUpdateServiceGroupRequest, cancelToken?: CancelToken): Promise<ServiceGroupDto> {
        let url_ = this.baseUrl + "/api/service-groups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<ServiceGroupDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ServiceGroupDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ServiceGroupDto>(null as any);
    }
}

export class ServicesClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    get(request: GetServiceRequest, cancelToken?: CancelToken): Promise<PaginationResponseOfServiceDto> {
        let url_ = this.baseUrl + "/api/services/get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<PaginationResponseOfServiceDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<PaginationResponseOfServiceDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginationResponseOfServiceDto>(null as any);
    }

    view(id: number, cancelToken?: CancelToken): Promise<ServiceDto> {
        let url_ = this.baseUrl + "/api/services/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processView(_response);
        });
    }

    protected processView(response: AxiosResponse): Promise<ServiceDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ServiceDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ServiceDto>(null as any);
    }

    update(id: number, request: CreateOrUpdateServiceRequest, cancelToken?: CancelToken): Promise<ServiceDto> {
        let url_ = this.baseUrl + "/api/services/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<ServiceDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ServiceDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ServiceDto>(null as any);
    }

    remove(id: number, cancelToken?: CancelToken): Promise<ServiceDto> {
        let url_ = this.baseUrl + "/api/services/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: AxiosResponse): Promise<ServiceDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ServiceDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ServiceDto>(null as any);
    }

    create(request: CreateOrUpdateServiceRequest, cancelToken?: CancelToken): Promise<ServiceDto> {
        let url_ = this.baseUrl + "/api/services";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<ServiceDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ServiceDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ServiceDto>(null as any);
    }
}

export class SpecialiaztionsClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    get(request: GetSpecializationRequest, cancelToken?: CancelToken): Promise<PaginationResponseOfSpecializationDto> {
        let url_ = this.baseUrl + "/api/specialiations/get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<PaginationResponseOfSpecializationDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<PaginationResponseOfSpecializationDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginationResponseOfSpecializationDto>(null as any);
    }

    view(id: number, cancelToken?: CancelToken): Promise<SpecializationDto> {
        let url_ = this.baseUrl + "/api/specialiations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processView(_response);
        });
    }

    protected processView(response: AxiosResponse): Promise<SpecializationDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<SpecializationDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SpecializationDto>(null as any);
    }

    update(id: number, request: CreateOrUpdateSpecializationRequest, cancelToken?: CancelToken): Promise<SpecializationDto> {
        let url_ = this.baseUrl + "/api/specialiations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<SpecializationDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<SpecializationDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SpecializationDto>(null as any);
    }

    remove(id: number, cancelToken?: CancelToken): Promise<SpecializationDto> {
        let url_ = this.baseUrl + "/api/specialiations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: AxiosResponse): Promise<SpecializationDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<SpecializationDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SpecializationDto>(null as any);
    }

    create(request: CreateOrUpdateSpecializationRequest, cancelToken?: CancelToken): Promise<SpecializationDto> {
        let url_ = this.baseUrl + "/api/specialiations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<SpecializationDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<SpecializationDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SpecializationDto>(null as any);
    }
}

export class StatisticClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    get(request: StatisticRequest, cancelToken?: CancelToken): Promise<ResponseStatisticDto> {
        let url_ = this.baseUrl + "/api/statistic";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<ResponseStatisticDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ResponseStatisticDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResponseStatisticDto>(null as any);
    }

    getProfile(request: RequestProfileStatisticDto, cancelToken?: CancelToken): Promise<ResponseProfileStatisticDto> {
        let url_ = this.baseUrl + "/api/statistic/profile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetProfile(_response);
        });
    }

    protected processGetProfile(response: AxiosResponse): Promise<ResponseProfileStatisticDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<ResponseProfileStatisticDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResponseProfileStatisticDto>(null as any);
    }
}

export class TgBotClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    update(update: Update, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/bot/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(update);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class TokensClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    register(request: TokenRequest, cancelToken?: CancelToken): Promise<TokenDto> {
        let url_ = this.baseUrl + "/api/tokens/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: AxiosResponse): Promise<TokenDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<TokenDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TokenDto>(null as any);
    }

    fastRegister(request: TokenRequest, cancelToken?: CancelToken): Promise<TokenDto> {
        let url_ = this.baseUrl + "/api/tokens/fast-register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFastRegister(_response);
        });
    }

    protected processFastRegister(response: AxiosResponse): Promise<TokenDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<TokenDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TokenDto>(null as any);
    }

    login(request: TokenRequest, cancelToken?: CancelToken): Promise<TokenDto> {
        let url_ = this.baseUrl + "/api/tokens/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<TokenDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<TokenDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TokenDto>(null as any);
    }

    refresh(request: TokenDto, cancelToken?: CancelToken): Promise<TokenDto> {
        let url_ = this.baseUrl + "/api/tokens/refresh";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRefresh(_response);
        });
    }

    protected processRefresh(response: AxiosResponse): Promise<TokenDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<TokenDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TokenDto>(null as any);
    }

    check(request: TokenDto, cancelToken?: CancelToken): Promise<CheckResultDto> {
        let url_ = this.baseUrl + "/api/tokens/check";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCheck(_response);
        });
    }

    protected processCheck(response: AxiosResponse): Promise<CheckResultDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<CheckResultDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CheckResultDto>(null as any);
    }
}

export class UploadClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    view(id: number | undefined, cancelToken?: CancelToken): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/upload?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processView(_response);
        });
    }

    protected processView(response: AxiosResponse): Promise<FileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<FileDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileDto>(null as any);
    }

    upload(file: FileParameter | undefined, cancelToken?: CancelToken): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/upload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("File", file.data, file.fileName ? file.fileName : "File");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpload(_response);
        });
    }

    protected processUpload(response: AxiosResponse): Promise<FileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<FileDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileDto>(null as any);
    }

    download(filePath: string | undefined, cancelToken?: CancelToken): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/upload/download?";
        if (filePath === null)
            throw new Error("The parameter 'filePath' cannot be null.");
        else if (filePath !== undefined)
            url_ += "filePath=" + encodeURIComponent("" + filePath) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            responseType: "blob",
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownload(_response);
        });
    }

    protected processDownload(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }

    remove(id: number, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/upload/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class UsersClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    get(request: GetUsersRequest, cancelToken?: CancelToken): Promise<PaginationResponseOfUserDto> {
        let url_ = this.baseUrl + "/api/users/get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<PaginationResponseOfUserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<PaginationResponseOfUserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginationResponseOfUserDto>(null as any);
    }

    view(id: number, cancelToken?: CancelToken): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processView(_response);
        });
    }

    protected processView(response: AxiosResponse): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<UserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto>(null as any);
    }

    update(id: number, request: CreateOrUpdateUserRequest, cancelToken?: CancelToken): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<UserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto>(null as any);
    }

    remove(id: number, cancelToken?: CancelToken): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: AxiosResponse): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<UserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto>(null as any);
    }

    viewByPhone(phone: string | undefined, cancelToken?: CancelToken): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/users/by-phone?";
        if (phone === null)
            throw new Error("The parameter 'phone' cannot be null.");
        else if (phone !== undefined)
            url_ += "phone=" + encodeURIComponent("" + phone) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processViewByPhone(_response);
        });
    }

    protected processViewByPhone(response: AxiosResponse): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<UserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto>(null as any);
    }

    partialUpdate(id: number, request: PartialUpdateUserRequest, cancelToken?: CancelToken): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/users/partial/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPartialUpdate(_response);
        });
    }

    protected processPartialUpdate(response: AxiosResponse): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<UserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto>(null as any);
    }

    create(request: CreateOrUpdateUserRequest, cancelToken?: CancelToken): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JSON.parse(resultData200);
            return Promise.resolve<UserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto>(null as any);
    }
}

export interface PaginationResponseOfAppointmentDto {
    totalPages: number;
    totalCount: number;
    list: AppointmentDto[];
}

export interface AppointmentDto {
    id?: number | undefined;
    employeeId: number;
    scheduleId: number;
    serviceId: number;
    startAt: string;
    endAt: string;
    phone: string;
    paidWithBonuses?: number | undefined;
    promoId?: number | undefined;
    inviterId?: number | undefined;
    employee?: UserDto | undefined;
    schedule?: ScheduleDto | undefined;
    service?: ServiceDto | undefined;
}

export interface UserDto {
    id?: number | undefined;
    login: string;
    password?: string | undefined;
    newPassword?: string | undefined;
    role: string;
    punchMapId?: number | undefined;
    stepsCount?: number | undefined;
    fullName?: string | undefined;
    avatarId?: number | undefined;
    notificationsEnabled?: boolean | undefined;
    authTgCode?: string | undefined;
    tgChatId?: string | undefined;
    inviterId?: number | undefined;
    invitePromoId?: number | undefined;
    startWorkTime?: string | undefined;
    endWorkTime?: string | undefined;
    invitePromo?: PromoDto | undefined;
    invitedUsers?: UserDto[] | undefined;
    specializationIds: number[];
    specializations?: SpecializationDto[] | undefined;
    avatar?: FileDto | undefined;
    punchMap?: PunchMapDto | undefined;
    employeeAppointments?: AppointmentDto[] | undefined;
    clientAppointments?: AppointmentDto[] | undefined;
    master?: AppointmentDto[] | undefined;
    promos?: PromoDto[] | undefined;
    upcomingAppointments: UpcomigAppointment[];
}

export interface PromoDto {
    id?: number | undefined;
    title: string;
    description: string;
    startDate?: string | undefined;
    endDate?: string | undefined;
    bonusCount?: number | undefined;
    type?: string | undefined;
    imageId: number;
    showOnHomePage: boolean;
    startAt?: string | undefined;
    endAt?: string | undefined;
    allowedWeekDays?: string | undefined;
    image?: FileDto | undefined;
    promoServices: PromoServiceDto[];
}

export interface FileDto {
    id: number;
    path: string;
    name: string;
}

export interface PromoServiceDto {
    id?: number | undefined;
    promoId: number;
    serviceId: number;
    discount: number;
    service?: ServiceDto | undefined;
}

export interface ServiceDto {
    id?: number | undefined;
    name: string;
    price: number;
    duration: number;
    specializationId: number;
    groupId: number;
    bonusCount: number;
    paidAmountWithBonuses: number;
    createdBy: number;
    specialization?: SpecializationDto | undefined;
}

export interface SpecializationDto {
    id?: number | undefined;
    name: string;
}

export interface PunchMapDto {
    id?: number | undefined;
    employeeId?: number | undefined;
    stepsCount: number;
    columnsCount: number;
    punchMapPromos: PunchMapPromoDto[];
}

export interface PunchMapPromoDto {
    id?: number | undefined;
    punchMapId: number;
    promoId: number;
    step: number;
    promo?: PromoDto | undefined;
}

export interface UpcomigAppointment {
    scheduleId: number;
    date: string;
    startAt: string;
    endAt: string;
}

export interface ScheduleDto {
    id?: number | undefined;
    date: string;
    startAt: string;
    endAt: string;
    employeeId: number;
}

export interface PaginationRequest {
    page?: number | undefined;
    size?: number | undefined;
}

export interface GetAppointmentRequest extends PaginationRequest {
    employeeId: number;
    scheduleId?: number | undefined;
}

export interface CreateOrUpdateAppointmentRequest extends AppointmentDto {
}

export interface PaginationResponseOfGalleryDto {
    totalPages: number;
    totalCount: number;
    list: GalleryDto[];
}

export interface GalleryDto {
    id?: number | undefined;
    imageId: number;
    serviceId: number;
    service: ServiceDto;
    image: FileDto;
}

export interface GetGalleryRequest extends PaginationRequest {
}

export interface CreateOrUpdateGalleryRequest {
    id?: number | undefined;
    images: number[];
    serviceId: number;
}

export interface PaginationResponseOfPromoDto {
    totalPages: number;
    totalCount: number;
    list: PromoDto[];
}

export interface GetPromoRequest extends PaginationRequest {
    showOnHomePage?: boolean | undefined;
    onlyCurrent?: boolean | undefined;
    type?: string | undefined;
}

export interface CreateOrUpdatePromoRequest extends PromoDto {
}

export interface PaginationResponseOfPunchMapDto {
    totalPages: number;
    totalCount: number;
    list: PunchMapDto[];
}

export interface GetPunchMapRequest extends PaginationRequest {
}

export interface CreateOrUpdatePunchMapRequest extends PunchMapDto {
}

export interface GetNearestScheduleRequest {
    employeeId: number;
}

export interface ScheduleDayDto {
    scheduleId?: number | undefined;
    startAt?: string | undefined;
    endAt?: string | undefined;
    day: number;
    isCurrentMonth: boolean;
    content?: string | undefined;
}

export interface GetSchedulesRequest {
    employeeId?: number | undefined;
    year?: number | undefined;
    month?: number | undefined;
    duration?: number | undefined;
    contentType: string;
    startAt?: string | undefined;
    endAt?: string | undefined;
    allowedWeekdays?: string | undefined;
}

export interface ScheduleTimeDto {
    time: string;
    isAvailable: boolean;
}

export interface GetScheduleTimesRequest {
    scheduleId: number;
    duration: number;
    startAt?: string | undefined;
    endAt?: string | undefined;
}

export interface SchedulePeriodDto {
    startAt?: string | undefined;
    endAt?: string | undefined;
    appointment?: AppointmentDto | undefined;
}

export interface GetSchedulePriodsRequest {
    scheduleId: number;
    excludedId?: number | undefined;
}

export interface FillScheduleDto {
    employeeId: number;
    startDate: string;
    endDate: string;
    fillType: string;
    workDays: number;
    weekendDays: number;
    startAt: string;
    endAt: string;
    removeApplications: boolean;
}

export interface FillScheduleRequest extends FillScheduleDto {
}

export interface CreateOrUpdateScheduleRequest extends ScheduleDto {
}

export interface PaginationResponseOfServiceGroupDto {
    totalPages: number;
    totalCount: number;
    list: ServiceGroupDto[];
}

export interface ServiceGroupDto {
    id?: number | undefined;
    name: string;
    services?: ServiceDto[] | undefined;
}

export interface GetServiceGroupRequest extends PaginationRequest {
    employeeId?: number | undefined;
    exludedIds?: number[] | undefined;
    promoId?: number | undefined;
    serviceName?: string | undefined;
}

export interface CreateOrUpdateServiceGroupRequest extends ServiceGroupDto {
}

export interface PaginationResponseOfServiceDto {
    totalPages: number;
    totalCount: number;
    list: ServiceDto[];
}

export interface GetServiceRequest extends PaginationRequest {
    employeeId?: number | undefined;
    exludedIds?: number[] | undefined;
}

export interface CreateOrUpdateServiceRequest extends ServiceDto {
}

export interface PaginationResponseOfSpecializationDto {
    totalPages: number;
    totalCount: number;
    list: SpecializationDto[];
}

export interface GetSpecializationRequest extends PaginationRequest {
}

export interface CreateOrUpdateSpecializationRequest extends SpecializationDto {
}

export interface ResponseStatisticDto {
    revenueCount: number;
    revenue: StatisticDto;
    applications: StatisticDto;
    services: StatisticDto;
}

export interface StatisticDto {
    labels: string[];
    values: number[];
}

export interface StatisticRequest {
    startDate?: string | undefined;
    endDate?: string | undefined;
    employeeId?: number | undefined;
}

export interface ResponseProfileStatisticDto {
    schedulesCount: number;
    appointmentsCount: number;
    totalAmount: number;
}

export interface RequestProfileStatisticDto {
    employeeId: number;
}

/** This object represents an incoming update. */
export interface Update {
    /** The update's unique identifier. Update identifiers start from a certain positive number and increase
sequentially. This ID becomes especially handy if you're using
Webhooks, since it allows you to ignore repeated
updates or to restore the correct update sequence, should they get out of order. If there are no new updates
for at least a week, then identifier of the next update will be chosen randomly instead of sequentially. */
    update_id: number;
    /** Optional. New incoming message of any kind — text, photo, sticker, etc. */
    message?: Message | undefined;
    /** Optional. New version of a message that is known to the bot and was edited */
    edited_message?: Message | undefined;
    /** Optional. New incoming channel post of any kind — text, photo, sticker, etc. */
    channel_post?: Message | undefined;
    /** Optional. New version of a channel post that is known to the bot and was edited */
    edited_channel_post?: Message | undefined;
    /** Optional. New incoming inline query */
    inline_query?: InlineQuery | undefined;
    /** Optional. The result of a inline query that was chosen by a user and sent to their chat partner */
    chosen_inline_result?: ChosenInlineResult | undefined;
    /** Optional. New incoming callback query */
    callback_query?: CallbackQuery | undefined;
    /** Optional. New incoming shipping query. Only for invoices with flexible price */
    shipping_query?: ShippingQuery | undefined;
    /** Optional. New incoming pre-checkout query. Contains full information about checkout */
    pre_checkout_query?: PreCheckoutQuery | undefined;
    /** Optional. New poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot */
    poll?: Poll | undefined;
    /** Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were
sent by the bot itself. */
    poll_answer?: PollAnswer | undefined;
    /** Optional. The bot’s chat member status was updated in a chat. For private chats, this update is received
only when the bot is blocked or unblocked by the user. */
    my_chat_member?: ChatMemberUpdated | undefined;
    /** Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat
and must explicitly specify “ChatMember” in the list of allowed_updates to
receive these updates. */
    chat_member?: ChatMemberUpdated | undefined;
    /** Optional. A request to join the chat has been sent. The bot must have the
CanInviteUsers administrator right in the chat to receive these updates. */
    chat_join_request?: ChatJoinRequest | undefined;
}

/** This object represents a message. */
export interface Message {
    /** Unique message identifier inside this chat */
    message_id: number;
    /** Optional. Unique identifier of a message thread to which the message belongs; for supergroups only */
    message_thread_id?: number | undefined;
    /** Optional. Sender, empty for messages sent to channels */
    from?: User | undefined;
    /** Optional. Sender of the message, sent on behalf of a chat. The channel itself for channel messages.
The supergroup itself for messages from anonymous group administrators. The linked channel for messages
automatically forwarded to the discussion group */
    sender_chat?: Chat | undefined;
    /** Date the message was sent */
    date: string;
    /** Conversation the message belongs to */
    chat: Chat;
    /** Optional. For forwarded messages, sender of the original message */
    forward_from?: User | undefined;
    /** Optional. true, if the message is sent to a forum topic */
    is_topic_message?: boolean | undefined;
    /** Optional. For messages forwarded from channels or from anonymous administrators, information about the
original sender chat */
    forward_from_chat?: Chat | undefined;
    /** Optional. For messages forwarded from channels, identifier of the original message in the channel */
    forward_from_message_id?: number | undefined;
    /** Optional. For messages forwarded from channels, signature of the post author if present */
    forward_signature?: string | undefined;
    /** Optional. Sender's name for messages forwarded from users who disallow adding a link to their account in
forwarded messages */
    forward_sender_name?: string | undefined;
    /** Optional. For forwarded messages, date the original message was sent */
    forward_date?: string | undefined;
    /** Optional. true, if the message is a channel post that was automatically forwarded to the connected
discussion group */
    is_automatic_forward?: boolean | undefined;
    /** Optional. For replies, the original message. Note that the Message object in this field
will not contain further ReplyToMessage fields even if it itself is a reply. */
    reply_to_message?: Message | undefined;
    /** Optional. Bot through which the message was sent */
    via_bot?: User | undefined;
    /** Optional. Date the message was last edited */
    edit_date?: string | undefined;
    /** Optional. true, if messages from the chat can't be forwarded to other chats.
Returned only in GetChatRequest. */
    has_protected_content?: boolean | undefined;
    /** Optional. The unique identifier of a media message group this message belongs to */
    media_group_id?: string | undefined;
    /** Optional. Signature of the post author for messages in channels, or the custom title of an anonymous
group administrator */
    author_signature?: string | undefined;
    /** Optional. For text messages, the actual text of the message, 0-4096 characters */
    text?: string | undefined;
    /** Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear
in the text */
    entities?: MessageEntity[] | undefined;
    /** Optional. Message is an animation, information about the animation. For backward compatibility, when this
field is set, the Document field will also be set */
    animation?: Animation | undefined;
    /** Optional. Message is an audio file, information about the file */
    audio?: Audio | undefined;
    /** Optional. Message is a general file, information about the file */
    document?: Document | undefined;
    /** Optional. Message is a photo, available sizes of the photo */
    photo?: PhotoSize[] | undefined;
    /** Optional. Message is a sticker, information about the sticker */
    sticker?: Sticker | undefined;
    /** Optional. Message is a video, information about the video */
    video?: Video | undefined;
    /** Optional. Message is a video note, information about the video message */
    video_note?: VideoNote | undefined;
    /** Optional. Message is a voice message, information about the file */
    voice?: Voice | undefined;
    /** Optional. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters */
    caption?: string | undefined;
    /** Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that
appear in the caption */
    caption_entities?: MessageEntity[] | undefined;
    /** Optional. true, if the message media is covered by a spoiler animation */
    has_media_spoiler?: boolean | undefined;
    /** Optional. Message is a shared contact, information about the contact */
    contact?: Contact | undefined;
    /** Optional. Message is a dice with random value */
    dice?: Dice | undefined;
    /** Optional. Message is a game, information about the game
  */
    game?: Game | undefined;
    /** Optional. Message is a native poll, information about the poll */
    poll?: Poll | undefined;
    /** Optional. Message is a venue, information about the venue. For backward compatibility, when this field
is set, the Location field will also be set */
    venue?: Venue | undefined;
    /** Optional. Message is a shared location, information about the location */
    location?: Location | undefined;
    /** Optional. New members that were added to the group or supergroup and information about them
(the bot itself may be one of these members) */
    new_chat_members?: User[] | undefined;
    /** Optional. A member was removed from the group, information about them (this member may be the bot itself) */
    left_chat_member?: User | undefined;
    /** Optional. A chat title was changed to this value */
    new_chat_title?: string | undefined;
    /** Optional. A chat photo was change to this value */
    new_chat_photo?: PhotoSize[] | undefined;
    /** Optional. Service message: the chat photo was deleted */
    delete_chat_photo?: boolean | undefined;
    /** Optional. Service message: the group has been created */
    group_chat_created?: boolean | undefined;
    /** Optional. Service message: the supergroup has been created. This field can't be received in a message
coming through updates, because bot can't be a member of a supergroup when it is created. It can only be
found in ReplyToMessage if someone replies to a very first message in a directly created
supergroup. */
    supergroup_chat_created?: boolean | undefined;
    /** Optional. Service message: the channel has been created. This field can't be received in a message coming
through updates, because bot can't be a member of a channel when it is created. It can only be found in
ReplyToMessage if someone replies to a very first message in a channel. */
    channel_chat_created?: boolean | undefined;
    /** Optional. Service message: auto-delete timer settings changed in the chat */
    message_auto_delete_timer_changed?: MessageAutoDeleteTimerChanged | undefined;
    /** Optional. The group has been migrated to a supergroup with the specified identifier */
    migrate_to_chat_id?: number | undefined;
    /** Optional. The supergroup has been migrated from a group with the specified identifier */
    migrate_from_chat_id?: number | undefined;
    /** Optional. Specified message was pinned. Note that the Message object in this field will not contain
further ReplyToMessage fields even if it is itself a reply. */
    pinned_message?: Message | undefined;
    /** Optional. Message is an invoice for a
payment, information about the invoice */
    invoice?: Invoice | undefined;
    /** Optional. Message is a service message about a successful payment, information about the payment */
    successful_payment?: SuccessfulPayment | undefined;
    /** Optional. Service message: a user was shared with the bot */
    user_shared?: UserShared | undefined;
    /** Optional. Service message: a chat was shared with the bot */
    chat_shared?: ChatShared | undefined;
    /** Optional. The domain name of the website on which the user has logged in */
    connected_website?: string | undefined;
    /** Optional. Service message: the user allowed the bot added to the attachment menu to write messages */
    write_access_allowed?: WriteAccessAllowed | undefined;
    /** Optional. Telegram Passport data */
    passport_data?: PassportData | undefined;
    /** Optional. Service message. A user in the chat triggered another user's proximity alert while
sharing Live Location */
    proximity_alert_triggered?: ProximityAlertTriggered | undefined;
    /** Optional. Service message: forum topic created */
    forum_topic_created?: ForumTopicCreated | undefined;
    /** Optional. Service message: forum topic edited */
    forum_topic_edited?: ForumTopicEdited | undefined;
    /** Optional. Service message: forum topic closed */
    forum_topic_closed?: ForumTopicClosed | undefined;
    /** Optional. Service message: forum topic reopened */
    forum_topic_reopened?: ForumTopicReopened | undefined;
    /** Optional. Service message: the 'General' forum topic hidden */
    general_forum_topic_hidden?: GeneralForumTopicHidden | undefined;
    /** Optional. Service message: the 'General' forum topic unhidden */
    general_forum_topic_unhidden?: GeneralForumTopicUnhidden | undefined;
    /** Optional. Service message: video chat scheduled */
    video_chat_scheduled?: VideoChatScheduled | undefined;
    /** Optional. Service message: video chat started */
    video_chat_started?: VideoChatStarted | undefined;
    /** Optional. Service message: video chat ended */
    video_chat_ended?: VideoChatEnded | undefined;
    /** Optional. Service message: new participants invited to a video chat */
    video_chat_participants_invited?: VideoChatParticipantsInvited | undefined;
    /** Optional. Service message: data sent by a Web App */
    web_app_data?: WebAppData | undefined;
    /** Optional. Inline keyboard attached to the message. LoginUrl buttons are represented as
ordinary url buttons. */
    reply_markup?: InlineKeyboardMarkup | undefined;
}

/** This object represents a Telegram user or bot. */
export interface User {
    /** Unique identifier for this user or bot */
    id: number;
    /** true, if this user is a bot */
    is_bot: boolean;
    /** User's or bot’s first name */
    first_name: string;
    /** Optional. User's or bot’s last name */
    last_name?: string | undefined;
    /** Optional. User's or bot’s username */
    username?: string | undefined;
    /** Optional. IETF language tag of the
user's language */
    language_code?: string | undefined;
    /** Optional. true, if this user is a Telegram Premium user */
    is_premium?: boolean | undefined;
    /** Optional. true, if this user added the bot to the attachment menu */
    added_to_attachment_menu?: boolean | undefined;
    /** Optional. true, if the bot can be invited to groups. Returned only in GetMeRequest */
    can_join_groups?: boolean | undefined;
    /** Optional. true, if privacy mode is disabled for the bot. Returned only in GetMeRequest */
    can_read_all_group_messages?: boolean | undefined;
    /** Optional. true, if the bot supports inline queries. Returned only in GetMeRequest */
    supports_inline_queries?: boolean | undefined;
}

/** This object represents a chat. */
export interface Chat {
    /** Unique identifier for this chat. This number may have more
than 32 significant bits and some programming languages may have
difficulty/silent defects in interpreting it. But it has
at most 52 significant bits, so a signed 64-bit integer
or double-precision float type are safe for storing this identifier. */
    id: number;
    /** Type of chat, can be either “private”, “group”, “supergroup” or “channel” */
    type: ChatType;
    /** Optional. Title, for supergroups, channels and group chats */
    title?: string | undefined;
    /** Optional. Username, for private chats, supergroups and channels if available */
    username?: string | undefined;
    /** Optional. First name of the other party in a private chat */
    first_name?: string | undefined;
    /** Optional. Last name of the other party in a private chat */
    last_name?: string | undefined;
    /** Optional. true, if the supergroup chat is a forum (has topics enabled) */
    is_forum?: boolean | undefined;
    /** Optional. Chat photo. Returned only in GetChatRequest. */
    photo?: ChatPhoto | undefined;
    /** Optional. If non-empty, the list of all active chat usernames; for private chats, supergroups and channels.
Returned only in GetChatRequest. */
    active_usernames?: string[] | undefined;
    /** Optional. Custom emoji identifier of emoji status of the other party in a private chat.
Returned only in GetChatRequest. */
    emoji_status_custom_emoji_id?: string | undefined;
    /** Optional. Bio of the other party in a private chat. Returned only in GetChatRequest. */
    bio?: string | undefined;
    /** Optional. true, if privacy settings of the other party in the private chat allows to use
tg://user?id=<user_id> links only in chats with the user.
Returned only in GetChatRequest. */
    has_private_forwards?: boolean | undefined;
    /** Optional. true, if the privacy settings of the other party restrict sending voice
and video note messages in the private chat.
Returned only in GetChatRequest. */
    has_restricted_voice_and_video_messages?: boolean | undefined;
    /** Optional. true, if users need to join the supergroup before they can send messages.
Returned only in GetChatRequest. */
    join_to_send_messages?: boolean | undefined;
    /** Optional. true, if all users directly joining the supergroup need to be approved by supergroup administrators.
Returned only in GetChatRequest. */
    join_by_request?: boolean | undefined;
    /** Optional. Description, for groups, supergroups and channel chats.
Returned only in GetChatRequest. */
    description?: string | undefined;
    /** Optional. Primary invite link, for groups, supergroups and channel chats.
Returned only in GetChatRequest. */
    invite_link?: string | undefined;
    /** Optional. The most recent pinned message (by sending date).
Returned only in GetChatRequest. */
    pinned_message?: Message | undefined;
    /** Optional. Default chat member permissions, for groups and supergroups.
Returned only in GetChatRequest. */
    permissions?: ChatPermissions | undefined;
    /** Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each
unpriviledged user. Returned only in GetChatRequest. */
    slow_mode_delay?: number | undefined;
    /** Optional. The time after which all messages sent to the chat will be automatically deleted; in seconds.
Returned only in GetChatRequest. */
    message_auto_delete_time?: number | undefined;
    /** Optional. true, if aggressive anti-spam checks are enabled in the supergroup. The field is
only available to chat administrators. Returned only in GetChatRequest. */
    has_aggressive_anti_spam_enabled?: boolean | undefined;
    /** Optional. true, if non-administrators can only get the list of bots and administrators in
the chat. Returned only in GetChatRequest. */
    has_hidden_members?: boolean | undefined;
    /** Optional. true, if messages from the chat can't be forwarded to other chats.
Returned only in GetChatRequest. */
    has_protected_content?: boolean | undefined;
    /** Optional. For supergroups, name of group sticker set.
Returned only in GetChatRequest. */
    sticker_set_name?: string | undefined;
    /** Optional. True, if the bot can change the group sticker set.
Returned only in GetChatRequest. */
    can_set_sticker_set?: boolean | undefined;
    /** Optional. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel
and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some
programming languages may have difficulty/silent defects in interpreting it. But it is smaller than
52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
Returned only in GetChatRequest. */
    linked_chat_id?: number | undefined;
    /** Optional. For supergroups, the location to which the supergroup is connected.
Returned only in GetChatRequest. */
    location?: ChatLocation | undefined;
}

/** Type of the Chat, from which the inline query was sent */
export enum ChatType {
    Private = 1,
    Group = 2,
    Channel = 3,
    Supergroup = 4,
    Sender = 5,
}

/** Collection of fileIds of profile pictures of a chat. */
export interface ChatPhoto {
    /** File identifier of small (160x160) chat photo. This FileId can be used only for photo download and only
for as long as the photo is not changed. */
    small_file_id: string;
    /** Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for
different bots. Can't be used to download or reuse the file. */
    small_file_unique_id: string;
    /** File identifier of big (640x640) chat photo. This FileId can be used only for photo download and only for
as long as the photo is not changed. */
    big_file_id: string;
    /** Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for
different bots. Can't be used to download or reuse the file. */
    big_file_unique_id: string;
}

/** Describes actions that a non-administrator user is allowed to take in a chat. */
export interface ChatPermissions {
    /** Optional. true, if the user is allowed to send text messages, contacts, locations and venues */
    can_send_messages?: boolean | undefined;
    /** Optional. true, if the user is allowed to send audios */
    can_send_audios: boolean;
    /** Optional. true, if the user is allowed to send documents */
    can_send_documents: boolean;
    /** Optional. true, if the user is allowed to send photos */
    can_send_photos: boolean;
    /** Optional. true, if the user is allowed to send videos */
    can_send_videos: boolean;
    /** Optional. true, if the user is allowed to send video notes */
    can_send_video_notes: boolean;
    /** Optional. true, if the user is allowed to send voice notes */
    can_send_voice_notes: boolean;
    /** Optional. true, if the user is allowed to send polls, implies CanSendMessages */
    can_send_polls?: boolean | undefined;
    /** Optional. true, if the user is allowed to send animations, games, stickers and use inline
bots */
    can_send_other_messages?: boolean | undefined;
    /** Optional. true, if the user is allowed to add web page previews to their messages */
    can_add_web_page_previews?: boolean | undefined;
    /** Optional. true, if the user is allowed to change the chat title, photo and other settings.
Ignored in public supergroups */
    can_change_info?: boolean | undefined;
    /** Optional. true, if the user is allowed to invite new users to the chat */
    can_invite_users?: boolean | undefined;
    /** Optional. true, if the user is allowed to pin messages. Ignored in public supergroups */
    can_pin_messages?: boolean | undefined;
    /** Optional. true, if the user is allowed to create forum topics.
If omitted defaults to the value of CanPinMessages
supergroups only */
    can_manage_topics?: boolean | undefined;
}

/** Represents a location to which a chat is connected. */
export interface ChatLocation {
    /** The location to which the supergroup is connected. Can't be a live location. */
    location: Location;
    /** Location address; 1-64 characters, as defined by the chat owner */
    address: string;
}

/** This object represents a point on the map. */
export interface Location {
    /** Longitude as defined by sender */
    longitude: number;
    /** Latitude as defined by sender */
    latitude: number;
    /** Optional. The radius of uncertainty for the location, measured in meters; 0-1500 */
    horizontal_accuracy?: number | undefined;
    /** Optional. Time relative to the message sending date, during which the location can be updated, in seconds. For active live locations only. */
    live_period?: number | undefined;
    /** Optional. The direction in which user is moving, in degrees; 1-360. For active live locations only. */
    heading?: number | undefined;
    /** Optional. Maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only. */
    proximity_alert_radius?: number | undefined;
}

/** This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc. */
export interface MessageEntity {
    /** Type of the entity */
    type: MessageEntityType;
    /** Offset in UTF-16 code units to the start of the entity */
    offset: number;
    /** Length of the entity in UTF-16 code units */
    length: number;
    /** Optional. For TextLink only, URL that will be opened after user taps on the text */
    url?: string | undefined;
    /** Optional. For TextMention only, the mentioned user */
    user?: User | undefined;
    /** Optional. For Pre only, the programming language of the entity text */
    language?: string | undefined;
    /** Optional. For CustomEmoji only, unique identifier of the custom emoji.
Use GetCustomEmojiStickersRequest to get full information about the sticker */
    custom_emoji_id?: string | undefined;
}

/** Type of a MessageEntity */
export enum MessageEntityType {
    Mention = 1,
    Hashtag = 2,
    BotCommand = 3,
    Url = 4,
    Email = 5,
    Bold = 6,
    Italic = 7,
    Code = 8,
    Pre = 9,
    TextLink = 10,
    TextMention = 11,
    PhoneNumber = 12,
    Cashtag = 13,
    Underline = 14,
    Strikethrough = 15,
    Spoiler = 16,
    CustomEmoji = 17,
}

/** This object represents a file ready to be downloaded. The file can be downloaded via GetFileAsync. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling GetFileAsync. */
export interface FileBase {
    /** Identifier for this file, which can be used to download or reuse the file */
    file_id: string;
    /** Unique identifier for this file, which is supposed to be the same over time and for different bots.
Can't be used to download or reuse the file. */
    file_unique_id: string;
    /** Optional. File size */
    file_size?: number | undefined;
}

/** This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound). */
export interface Animation extends FileBase {
    /** Video width as defined by sender */
    width: number;
    /** Video height as defined by sender */
    height: number;
    /** Duration of the video in seconds as defined by sender */
    duration: number;
    /** Optional. Animation thumbnail as defined by sender */
    thumbnail?: PhotoSize | undefined;
    /** Optional. Original animation filename as defined by sender */
    file_name?: string | undefined;
    /** Optional. MIME type of the file as defined by sender */
    mime_type?: string | undefined;
}

/** This object represents one size of a photo or a file / sticker thumbnail. */
export interface PhotoSize extends FileBase {
    /** Photo width */
    width: number;
    /** Photo height */
    height: number;
}

/** This object represents an audio file to be treated as music by the Telegram clients. */
export interface Audio extends FileBase {
    /** Duration of the audio in seconds as defined by sender */
    duration: number;
    /** Optional. Performer of the audio as defined by sender or by audio tags */
    performer?: string | undefined;
    /** Optional. Title of the audio as defined by sender or by audio tags */
    title?: string | undefined;
    /** Optional. Original filename as defined by sender */
    file_name?: string | undefined;
    /** Optional. MIME type of the file as defined by sender */
    mime_type?: string | undefined;
    /** Optional. Thumbnail of the album cover to which the music file belongs */
    thumbnail?: PhotoSize | undefined;
}

/** This object represents a general file (as opposed to photos, voice messages and audio files). */
export interface Document extends FileBase {
    /** Optional. Document thumbnail as defined by sender */
    thumbnail?: PhotoSize | undefined;
    /** Optional. Original filename as defined by sender */
    file_name?: string | undefined;
    /** Optional. MIME type of the file as defined by sender */
    mime_type?: string | undefined;
}

/** This object represents a sticker. */
export interface Sticker extends FileBase {
    /** Type of the sticker. The type of the sticker is independent from its format,
which is determined by the fields IsAnimated and IsVideo. */
    type: StickerType;
    /** Sticker width */
    width: number;
    /** Sticker height */
    height: number;
    /** true, if the sticker is animated */
    is_animated: boolean;
    /** true, if the sticker is a video sticker */
    is_video: boolean;
    /** Optional. Sticker thumbnail in the .WEBP or .JPG format */
    thumbnail?: PhotoSize | undefined;
    /** Optional. Emoji associated with the sticker */
    emoji?: string | undefined;
    /** Optional. Name of the sticker set to which the sticker belongs */
    set_name?: string | undefined;
    /** Optional. For premium regular stickers,
premium animation for the sticker */
    premium_animation?: File | undefined;
    /** Optional. For mask stickers,
the position where the mask should be placed */
    mask_position?: MaskPosition | undefined;
    /** Optional. For custom emoji stickers,
unique identifier of the custom emoji */
    custom_emoji_id?: string | undefined;
    /** Optional. true, if the sticker must be repainted to a text color
in messages, the color of the Telegram Premium badge in emoji
status, white color on chat photos, or another appropriate
color in other places */
    needs_repainting?: boolean | undefined;
}

/** Type of the Sticker */
export enum StickerType {
    Regular = 1,
    Mask = 2,
    CustomEmoji = 3,
}

/** This object represents a file ready to be downloaded. The file can be downloaded via GetFileAsync. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling GetFileAsync. */
export interface File extends FileBase {
    /** Optional. File path. Use GetFileAsync to get the file. */
    file_path?: string | undefined;
}

/** This object describes the position on faces where a mask should be placed by default. */
export interface MaskPosition {
    /** The part of the face relative to which the mask should be placed. */
    point: MaskPositionPoint;
    /** Shift by X-axis measured in widths of the mask scaled to the face size, from left to right.
For example, choosing -1.0 will place mask just to the left of the default mask position. */
    x_shift: number;
    /** Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom.
For example, 1.0 will place the mask just below the default mask position. */
    y_shift: number;
    /** Mask scaling coefficient. For example, 2.0 means double size. */
    scale: number;
}

/** The part of the face relative to which the mask should be placed. */
export enum MaskPositionPoint {
    Forehead = 1,
    Eyes = 2,
    Mouth = 3,
    Chin = 4,
}

/** This object represents a video file. */
export interface Video extends FileBase {
    /** Video width as defined by sender */
    width: number;
    /** Video height as defined by sender */
    height: number;
    /** Duration of the video in seconds as defined by sender */
    duration: number;
    /** Optional. Video thumbnail */
    thumbnail?: PhotoSize | undefined;
    /** Optional. Original filename as defined by sender */
    file_name?: string | undefined;
    /** Optional. Mime type of a file as defined by sender */
    mime_type?: string | undefined;
}

/** This object represents a video message (available in Telegram apps as of v.4.0). */
export interface VideoNote extends FileBase {
    /** Video width and height (diameter of the video message) as defined by sender */
    length: number;
    /** Duration of the video in seconds as defined by sender */
    duration: number;
    /** Optional. Video thumbnail */
    thumbnail?: PhotoSize | undefined;
}

/** This object represents a voice note. */
export interface Voice extends FileBase {
    /** Duration of the audio in seconds as defined by sender */
    duration: number;
    /** Optional. MIME type of the file as defined by sender */
    mime_type?: string | undefined;
}

/** This object represents a phone contact. */
export interface Contact {
    /** Contact's phone number */
    phone_number: string;
    /** Contact's first name */
    first_name: string;
    /** Optional. Contact's last name */
    last_name?: string | undefined;
    /** Optional. Contact's user identifier in Telegram */
    user_id?: number | undefined;
    /** Optional. Additional data about the contact in the form of a vCard */
    vcard?: string | undefined;
}

/** This object represents a dice with random value */
export interface Dice {
    /** Emoji on which the dice throw animation is based */
    emoji: string;
    /** Value of the dice, 1-6 for Dice (“🎲”),
Darts (“🎯”) and Bowling ("🎳"), 1-5 for Basketball (“🏀”) and
Football("⚽"), and values 1-64 for SlotMachine ("🎰"). Defaults to
Dice (“🎲”) */
    value: number;
}

/** This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers. */
export interface Game {
    /** Title of the game. */
    title: string;
    /** Description of the game. */
    description: string;
    /** Photo that will be displayed in the game message in chats. */
    photo: PhotoSize[];
    /** Optional. Brief description of the game or high scores included in the game message. Can be automatically
edited to include current high scores for the game when the bot calls
SetGameScoreRequest, or manually edited using
EditMessageTextRequest. 0-4096 characters. */
    text?: string | undefined;
    /** Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc. */
    text_entities?: MessageEntity[] | undefined;
    /** Optional. Animation that will be displayed in the game message in chats. Upload via
@BotFather */
    animation?: Animation | undefined;
}

/** This object contains information about a poll. */
export interface Poll {
    /** Unique poll identifier */
    id: string;
    /** Poll question, 1-300 characters */
    question: string;
    /** List of poll options */
    options: PollOption[];
    /** Total number of users that voted in the poll */
    total_voter_count: number;
    /** true, if the poll is closed */
    is_closed: boolean;
    /** true, if the poll is anonymous */
    is_anonymous: boolean;
    /** Poll type, currently can be “regular” or “quiz” */
    type: string;
    /** true, if the poll allows multiple answers */
    allows_multiple_answers: boolean;
    /** Optional. 0-based identifier of the correct answer option. Available only for polls in the quiz mode,
which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot. */
    correct_option_id?: number | undefined;
    /** Optional. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a
quiz-style poll, 0-200 characters */
    explanation?: string | undefined;
    /** Optional. Special entities like usernames, URLs, bot commands, etc. that appear in the
Explanation */
    explanation_entities?: MessageEntity[] | undefined;
    /** Optional. Amount of time in seconds the poll will be active after creation */
    open_period?: number | undefined;
    /** Optional. Point in time when the poll will be automatically closed */
    close_date?: string | undefined;
}

/** This object contains information about one answer option in a poll. */
export interface PollOption {
    /** Option text, 1-100 characters */
    text: string;
    /** Number of users that voted for this option */
    voter_count: number;
}

/** This object represents a venue. */
export interface Venue {
    /** Venue location */
    location: Location;
    /** Name of the venue */
    title: string;
    /** Address of the venue */
    address: string;
    /** Optional. Foursquare identifier of the venue */
    foursquare_id?: string | undefined;
    /** Optional. Foursquare type of the venue. (For example, "arts_entertainment/default",
"arts_entertainment/aquarium" or "food/icecream".) */
    foursquare_type?: string | undefined;
    /** Optional. Google Places identifier of the venue */
    google_place_id?: string | undefined;
    /** Optional. Google Places type of the venue. (See
supported types.) */
    google_place_type?: string | undefined;
}

/** This object represents a service message about a change in auto-delete timer settings. */
export interface MessageAutoDeleteTimerChanged {
    /** New auto-delete time for messages in the chat */
    message_auto_delete_time: number;
}

/** This object contains basic information about an invoice. */
export interface Invoice {
    /** Product name */
    title: string;
    /** Product description */
    description: string;
    /** Unique bot deep-linking parameter that can be used to generate this invoice */
    start_parameter: string;
    /** Three-letter ISO 4217
currency code */
    currency: string;
    /** Total price in the smallest units of the
currency
(integer, not float/double).

For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in
currencies.json, it shows the
number of digits past the decimal point for each currency (2 for the majority of currencies). */
    total_amount: number;
}

/** This object contains basic information about a successful payment. */
export interface SuccessfulPayment {
    /** Three-letter ISO 4217
currency code */
    currency: string;
    /** Total price in the smallest units of the
currency
(integer, not float/double).

For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter
in currencies.json, it shows
the number of digits past the decimal point for each currency (2 for the majority of currencies). */
    total_amount: number;
    /** Bot specified invoice payload */
    invoice_payload: string;
    /** Optional. Identifier of the shipping option chosen by the user */
    shipping_option_id?: string | undefined;
    /** Optional. Order info provided by the user */
    order_info?: OrderInfo | undefined;
    /** Telegram payment identifier */
    telegram_payment_charge_id: string;
    /** Provider payment identifier */
    provider_payment_charge_id: string;
}

/** This object represents information about an order. */
export interface OrderInfo {
    /** Optional. User name */
    name?: string | undefined;
    /** Optional. User's phone number */
    phone_number?: string | undefined;
    /** Optional. User email */
    email?: string | undefined;
    /** Optional. User shipping address */
    shipping_address?: ShippingAddress | undefined;
}

/** This object represents a shipping address. */
export interface ShippingAddress {
    /** ISO 3166-1 alpha-2 country code */
    country_code: string;
    /** State, if applicable */
    state: string;
    /** City */
    city: string;
    /** First line for the address */
    street_line1: string;
    /** Second line for the address */
    street_line2: string;
    /** Address post code */
    post_code: string;
}

/** This object contains information about the user whose identifier was shared with the bot using a KeyboardButtonRequestUser button. */
export interface UserShared {
    /** Identifier of the request */
    request_id: number;
    /** Identifier of the shared user. This number may have more than 32 significant bits and some programming
languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits,
so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot may not have
access to the user and could be unable to use this identifier, unless the user is already known to the bot by
some other means. */
    user_id: number;
}

/** This object contains information about the chat whose identifier was shared with the bot using a KeyboardButtonRequestChat button. */
export interface ChatShared {
    /** Identifier of the request */
    request_id: number;
    /** Identifier of the shared chat. This number may have more than 32 significant bits and some programming
languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits,
so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot may not have
access to the chat and could be unable to use this identifier, unless the chat is already known to the bot by
some other means. */
    chat_id: number;
}

/** This object represents a service message about a user allowing a bot to write messages after adding the bot to the attachment menu or launching a Web App from a link. */
export interface WriteAccessAllowed {
    /** Optional. Name of the Web App which was launched from a link */
    web_app_name?: string | undefined;
}

/** Contains information about Telegram Passport data shared with the bot by the user. */
export interface PassportData {
    /** Array with information about documents and other Telegram Passport elements that was shared with the bot. */
    data: EncryptedPassportElement[];
    /** Encrypted credentials required to decrypt the data. */
    credentials: EncryptedCredentials;
}

/** Contains information about documents or other Telegram Passport elements shared with the bot by the user. */
export interface EncryptedPassportElement {
    /** Element type. One of EncryptedPassportElementType */
    type: EncryptedPassportElementType;
    /** Optional. Base64-encoded encrypted Telegram Passport element data provided by the user, available for
PersonalDetails, Passport, DriverLicence,
IdentityCard, InternalPassport and Address
types. Can be decrypted and verified using the accompanying EncryptedCredentials. */
    data?: string | undefined;
    /** Optional. User's verified phone number, available only for PhoneNumber type. */
    phone_number?: string | undefined;
    /** Optional. User's verified email address, available only for Email type. */
    email?: string | undefined;
    /** Optional. Array of encrypted files with documents provided by the user, available for
UtilityBill, BankStatement, RentalAgreement,
PassportRegistration and TemporaryRegistration types.
Files can be decrypted and verified using the accompanying EncryptedCredentials. */
    files?: PassportFile[] | undefined;
    /** Optional. Encrypted file with the front side of the document, provided by the user. Available for
Passport, DriverLicence, IdentityCard and
InternalPassport. The file can be decrypted and verified using the accompanying
EncryptedCredentials. */
    front_side?: PassportFile | undefined;
    /** Optional. Encrypted file with the reverse side of the document, provided by the user. Available for
DriverLicence and IdentityCard. The file can be decrypted and verified using
the accompanying EncryptedCredentials. */
    reverse_side?: PassportFile | undefined;
    /** Optional. Encrypted file with the selfie of the user holding a document, provided by the user;
available for Passport, DriverLicence, IdentityCard and
InternalPassport. The file can be decrypted and verified using the accompanying
EncryptedCredentials. */
    selfie?: PassportFile | undefined;
    /** Optional. Array of encrypted files with translated versions of documents provided by the user.
Available if requested for Passport, DriverLicence,
IdentityCard, InternalPassport, UtilityBill,
BankStatement, RentalAgreement, PassportRegistration and
TemporaryRegistration types. Files can be decrypted and verified using the accompanying
EncryptedCredentials. */
    translation?: PassportFile[] | undefined;
    /** Base64-encoded element hash for using in PassportElementErrorUnspecified */
    hash: string;
}

/** EncryptedPassportElement element type */
export enum EncryptedPassportElementType {
    PersonalDetails = 1,
    Passport = 2,
    DriverLicence = 3,
    IdentityCard = 4,
    InternalPassport = 5,
    Address = 6,
    UtilityBill = 7,
    BankStatement = 8,
    RentalAgreement = 9,
    PassportRegistration = 10,
    TemporaryRegistration = 11,
    PhoneNumber = 12,
    Email = 13,
}

/** This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB. */
export interface PassportFile extends FileBase {
    /** DateTime when the file was uploaded */
    file_date: string;
}

/** Contains data required for decrypting and authenticating EncryptedPassportElement. See the Telegram Passport Documentation for a complete description of the data decryption and authentication processes. */
export interface EncryptedCredentials {
    /** Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets
required for EncryptedPassportElement decryption and authentication. */
    data: string;
    /** Base64-encoded data hash for data authentication. */
    hash: string;
    /** Base64-encoded secret, encrypted with the bot’s public RSA key, required for data decryption. */
    secret: string;
}

/** Represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user. */
export interface ProximityAlertTriggered {
    /** User that triggered the alert */
    traveler: User;
    /** User that set the alert */
    watcher: User;
    /** The distance between the users */
    distance: number;
}

/** This object represents a service message about a new forum topic created in the chat. */
export interface ForumTopicCreated {
    /** Name of the topic */
    name: string;
    /** Color of the topic icon in RGB format */
    icon_color: number;
    /** Optional. Unique identifier of the custom emoji shown as the topic icon */
    icon_custom_emoji_id?: string | undefined;
}

/** This object represents a service message about an edited forum topic. */
export interface ForumTopicEdited {
    /** Optional. New name of the topic, if it was edited */
    name?: string | undefined;
    /** Optional. New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed */
    icon_custom_emoji_id?: string | undefined;
}

/** This object represents a service message about a forum topic closed in the chat. Currently holds no information. */
export interface ForumTopicClosed {
}

/** This object represents a service message about a forum topic reopened in the chat. Currently holds no information. */
export interface ForumTopicReopened {
}

/** This object represents a service message about General forum topic hidden in the chat. Currently holds no information. */
export interface GeneralForumTopicHidden {
}

/** This object represents a service message about General forum topic unhidden in the chat. Currently holds no information. */
export interface GeneralForumTopicUnhidden {
}

/** This object represents a service message about a video chat scheduled in the chat. */
export interface VideoChatScheduled {
    /** Point in time when the voice chat is supposed to be started by a chat administrator */
    start_date: string;
}

/** This object represents a service message about a video chat started in the chat. Currently holds no information. */
export interface VideoChatStarted {
}

/** This object represents a service message about a video chat ended in the chat. */
export interface VideoChatEnded {
    /** Video chat duration in seconds */
    duration: number;
}

/** This object represents a service message about new members invited to a video chat. */
export interface VideoChatParticipantsInvited {
    /** Optional. New members that were invited to the voice chat */
    users: User[];
}

/** Contains data sent from a Web App to the bot. */
export interface WebAppData {
    /** The data. Be aware that a bad client can send arbitrary data in this field. */
    data: string;
    /** Text of the web_app keyboard button, from which the Web App was opened. Be aware that a bad client can
send arbitrary data in this field. */
    button_text: string;
}

/** This object represents an inline keyboard that appears right next to the Message it belongs to. */
export interface InlineKeyboardMarkup {
    /** Array of InlineKeyboardButton rows, each represented by an Array of
InlineKeyboardButton. */
    inline_keyboard: InlineKeyboardButton[][];
}

/** This object represents one button of an inline keyboard. You must use exactly one of the optional fields. */
export interface InlineKeyboardButton {
    /** Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed */
    text: string;
    /** Optional. HTTP or tg:// URL to be opened when the button is pressed. Links tg://user?id=<user_id>
can be used to mention a user by their ID without using a username, if this is allowed by their privacy settings. */
    url?: string | undefined;
    /** Optional. Data to be sent in a callback query to the bot when button
is pressed, 1-64 bytes */
    callback_data?: string | undefined;
    /** Optional. Description of the Web App that will be launched when the user presses the button. The Web App will
be able to send an arbitrary message on behalf of the user using the request
AnswerWebAppQueryRequest. Available only in private chats between a user and the bot. */
    web_app?: WebAppInfo | undefined;
    /** Optional. An HTTP URL used to automatically authorize the user. Can be used as a replacement for the
Telegram Login Widget. */
    login_url?: LoginUrl | undefined;
    /** Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and
insert the bot’s username and the specified inline query in the input field. Can be empty, in which case just
the bot’s username will be inserted. */
    switch_inline_query?: string | undefined;
    /** Optional. If set, pressing the button will insert the bot’s username and the specified inline query in the
current chat’s input field. Can be empty, in which case only the bot’s username will be inserted. */
    switch_inline_query_current_chat?: string | undefined;
    /** Optional. If set, pressing the button will prompt the user to select one of their chats of the specified type,
open that chat and insert the bot's username and the specified inline query in the input field */
    switch_inline_query_chosen_chat?: SwitchInlineQueryChosenChat | undefined;
    /** Optional. Description of the game that will be launched when the user presses the button. */
    callback_game?: CallbackGame | undefined;
    /** Optional. Specify true, to send a Pay button. */
    pay?: boolean | undefined;
}

/** Contains information about a Web App */
export interface WebAppInfo {
    /** An HTTPS URL of a Web App to be opened with additional data as specified in
Initializing Web Apps */
    url: string;
}

/** This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in. Telegram apps support these buttons as of version 5.7. */
export interface LoginUrl {
    /** An HTTP URL to be opened with user authorization data added to the query string when the button is pressed.
If the user refuses to provide authorization data, the original URL without information about the user will
be opened. The data added is the same as described in

Receiving authorization data
.

NOTE: You must always check the hash of the received data to verify the authentication and
the integrity of the data as described in
Checking authorization. */
    url: string;
    /** Optional. New text of the button in forwarded messages */
    forward_text?: string | undefined;
    /** Optional. Username of a bot, which will be used for user authorization. See
Setting up a bot for more
details. If not specified, the current bot’s username will be assumed. The url's domain must be the same
as the domain linked with the bot. See

Linking your domain to the bot for more details. */
    bot_username?: string | undefined;
    /** Optional. Pass true to request the permission for your bot to send messages to the user */
    request_write_access?: boolean | undefined;
}

/** This object represents an inline button that switches the current user to inline mode in a chosen chat, with an optional default inline query. */
export interface SwitchInlineQueryChosenChat {
    /** Optional. The default inline query to be inserted in the input field. If left empty,
only the bot's username will be inserted */
    query?: string | undefined;
    /** Optional. true, if private chats with users can be chosen */
    allow_user_chats?: boolean | undefined;
    /** Optional. true, if private chats with bots can be chosen */
    allow_bot_chats?: boolean | undefined;
    /** Optional. true, if group and supergroup chats can be chosen */
    allow_group_chats?: boolean | undefined;
    /** Optional. true, if channel chats can be chosen */
    allow_channel_chats?: boolean | undefined;
}

/** A placeholder, currently holds no information. Use @BotFather to set up your game. */
export interface CallbackGame {
}

/** This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results. */
export interface InlineQuery {
    /** Unique identifier for this query */
    id: string;
    /** Sender */
    from: User;
    /** Text of the query (up to 256 characters) */
    query: string;
    /** Offset of the results to be returned, can be controlled by the bot */
    offset: string;
    /** Optional. Type of the chat, from which the inline query was sent. Can be either  Sender for
a private chat with the inline query sender, Private, Group,
Supergroup, or Channel. The chat type should be always known for requests
sent from official clients and most third-party clients, unless the request was sent from a secret chat */
    chat_type?: ChatType | undefined;
    /** Optional. Sender location, only for bots that request user location */
    location?: Location | undefined;
}

/** This object represents a result of an InlineQuery that was chosen by the User and sent to their chat partner. */
export interface ChosenInlineResult {
    /** The unique identifier for the result that was chosen. */
    result_id: string;
    /** The user that chose the result. */
    from: User;
    /** Optional. Sender location, only for bots that require user location */
    location?: Location | undefined;
    /** Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached
to the message. Will be also received in callback queries and can be used to edit the message. */
    inline_message_id?: string | undefined;
    /** The query that was used to obtain the result. */
    query: string;
}

/** This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field Message will be present. If the button was attached to a message sent via the bot (in inline mode), the field InlineMessageId will be present. Exactly one of the fields data or GameShortName will be present. */
export interface CallbackQuery {
    /** Unique identifier for this query */
    id: string;
    /** Sender */
    from: User;
    /** Optional. Description with the callback button that originated the query. Note that message content and
message date will not be available if the message is too old */
    message?: Message | undefined;
    /** Optional. Identifier of the message sent via the bot in inline mode, that originated the query */
    inline_message_id?: string | undefined;
    /** Global identifier, uniquely corresponding to the chat to which the message with the callback button was
sent. Useful for high scores in games. */
    chat_instance: string;
    /** Optional. Data associated with the callback button. */
    data?: string | undefined;
    /** Optional. Short name of a Game to be returned, serves as the unique identifier for the game. */
    game_short_name?: string | undefined;
}

/** This object contains information about an incoming shipping query. */
export interface ShippingQuery {
    /** Unique query identifier */
    id: string;
    /** User who sent the query */
    from: User;
    /** Bot specified invoice payload */
    invoice_payload: string;
    /** User specified shipping address */
    shipping_address: ShippingAddress;
}

/** This object contains information about an incoming pre-checkout query. */
export interface PreCheckoutQuery {
    /** Unique query identifier */
    id: string;
    /** User who sent the query */
    from: User;
    /** Three-letter ISO 4217
currency code */
    currency: string;
    /** Total price in the smallest units of the
currency
(integer, not float/double).

For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in
currencies.json, it shows the
number of digits past the decimal point for each currency (2 for the majority of currencies). */
    total_amount: number;
    /** Bot specified invoice payload */
    invoice_payload: string;
    /** Optional. Identifier of the shipping option chosen by the user */
    shipping_option_id?: string | undefined;
    /** Optional. Order info provided by the user */
    order_info?: OrderInfo | undefined;
}

/** This object represents an answer of a user in a non-anonymous poll. */
export interface PollAnswer {
    /** Unique poll identifier */
    poll_id: string;
    /** The user, who changed the answer to the poll */
    user: User;
    /** 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote. */
    option_ids: number[];
}

/** This object represents changes in the status of a chat member. */
export interface ChatMemberUpdated {
    /** Chat the user belongs to */
    chat: Chat;
    /** Performer of the action, which resulted in the change */
    from: User;
    /** Date the change was done */
    date: string;
    /** Previous information about the chat member */
    old_chat_member: ChatMember;
    /** New information about the chat member */
    new_chat_member: ChatMember;
    /** Optional. Chat invite link, which was used by the user to join the chat; for joining by invite link
events only. */
    invite_link?: ChatInviteLink | undefined;
    /** Optional. true, if the user joined the chat via a chat folder invite link */
    via_chat_folder_invite_link?: boolean | undefined;
}

/** This object contains information about one member of the chat. */
export interface ChatMember {
    /** Information about the user */
    user: User;
}

/** Represents an invite link for a chat. */
export interface ChatInviteLink {
    /** The invite link. If the link was created by another chat administrator, then the second part of the
link will be replaced with “…”. */
    invite_link: string;
    /** Creator of the link */
    creator: User;
    /** true, if users joining the chat via the link need to be approved by chat administrators */
    creates_join_request: boolean;
    /** true, if the link is primary */
    is_primary: boolean;
    /** true, if the link is revoked */
    is_revoked: boolean;
    /** Optional. Invite link name */
    name?: string | undefined;
    /** Optional. Point in time when the link will expire or has been expired */
    expire_date?: string | undefined;
    /** Optional. Maximum number of users that can be members of the chat simultaneously after joining the chat
via this invite link; 1-99999 */
    member_limit?: number | undefined;
}

/** Represents a join request sent to a chat. */
export interface ChatJoinRequest {
    /** Chat to which the request was sent */
    chat: Chat;
    /** User that sent the join request */
    from: User;
    /** Identifier of a private chat with the user who sent the join request. This number may have more than 32
significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it
has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this
identifier. The bot can use this identifier for 24 hours to send messages until the join request is processed,
assuming no other administrator contacted the user. */
    user_chat_id: number;
    /** Date the request was sent */
    date: string;
    /** Optional. Bio of the user */
    bio?: string | undefined;
    /** Optional. Chat invite link that was used by the user to send the join request */
    invite_link?: ChatInviteLink | undefined;
}

export interface TokenDto {
    accessToken: string;
    refreshToken: string;
}

export interface TokenRequest {
    login: string;
    password?: string | undefined;
    punchMapId?: number | undefined;
    promoId?: number | undefined;
}

export interface CheckResultDto {
    result: string;
    currentUser?: UserDto | undefined;
}

export interface PaginationResponseOfUserDto {
    totalPages: number;
    totalCount: number;
    list: UserDto[];
}

export interface GetUsersRequest extends PaginationRequest {
    roles?: string[] | undefined;
    withUpcomingAppointments?: boolean | undefined;
    duration?: number | undefined;
    serviceId?: number | undefined;
    promoId?: number | undefined;
}

export interface CreateOrUpdateUserRequest extends UserDto {
}

export interface PartialUserUpdateDto {
    id: number;
    phone?: string | undefined;
    punchMapId?: number | undefined;
    promoId?: number | undefined;
}

export interface PartialUpdateUserRequest extends PartialUserUpdateDto {
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}